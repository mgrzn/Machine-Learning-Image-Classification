# -*- coding: utf-8 -*-
"""SubmissionMagrozanML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yM2Qmedl6SKY_ezFBHW2oKkyCW0HyQOX
"""

import tensorflow as tf
import numpy as np
import pandas as pd

!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

import zipfile

local_zip = 'rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp/')
zip_ref.close()

!sudo apt install tree
!tree -d /tmp

!python --version

!pip install split-folders
import splitfolders

import shutil

import os
base_dir = '/tmp/rockpaperscissors/rps-cv-images/'
if 'data_model' in os.listdir(base_dir):
    shutil.rmtree(os.path.join(base_dir, 'data_model'))

splitfolders.ratio(base_dir, output='../tmp/rockpaperscissors/rps-cv-images/data_model', seed=None, ratio=(.6, .4))

rock_dir = os.path.join(base_dir, 'rock')
train_rock_dir = os.path.join('../tmp/rockpaperscissors/rps-cv-images/data_model/train/rock')
val_rock_dir = os.path.join('../tmp/rockpaperscissors/rps-cv-images/data_model/val/rock')

paper_dir = os.path.join(base_dir, 'paper')
train_paper_dir = os.path.join('../tmp/rockpaperscissors/rps-cv-images/data_model/train/paper')
val_paper_dir = os.path.join('../tmp/rockpaperscissors/rps-cv-images/data_model/val/paper')

scissors_dir = os.path.join(base_dir, 'scissors')
train_scissors_dir = os.path.join('../tmp/rockpaperscissors/rps-cv-images/data_model/train/scissors')
val_scissors_dir = os.path.join('../tmp/rockpaperscissors/rps-cv-images/data_model/val/scissors')

!tree -d /tmp/rockpaperscissors/rps-cv-images/data_model

print('jml batuu:', len(os.listdir(rock_dir)))
print('trainnn:', len(os.listdir(train_rock_dir)))
print('validdd:', len(os.listdir(val_rock_dir)))


print('Jjml krts:', len(os.listdir(paper_dir)))
print('trainnn:', len(os.listdir(train_paper_dir)))
print('validdd:', len(os.listdir(val_paper_dir)))
print('\n')
print('jml gntng:', len(os.listdir(scissors_dir)))
print('trainnn:', len(os.listdir(train_scissors_dir)))
print('validdd:', len(os.listdir(val_scissors_dir)))

print('Total Gambar:', len(os.listdir(rock_dir))+len(os.listdir(paper_dir))+ len(os.listdir(scissors_dir)))

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

batu = os.listdir(rock_dir)
kertas = os.listdir(paper_dir)
gunting = os.listdir(scissors_dir)


pic_index = 2

next_rock = [os.path.join(rock_dir, fname)
                for fname in batu[pic_index-2:pic_index]]

next_paper = [os.path.join(paper_dir, fname)
                for fname in kertas[pic_index-2:pic_index]]

next_scissors = [os.path.join(scissors_dir, fname)
                for fname in gunting[pic_index-2:pic_index]]

for i, img_path in enumerate(next_rock+next_paper+next_scissors):
    img = mpimg.imread(img_path)
    plt.imshow(img)
    plt.axis('Off')
    plt.show()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

training_dir = "/tmp/rockpaperscissors/rps-cv-images/data_model/train"
training_datagen = ImageDataGenerator(
          rescale = 1./255,
          rotation_range=40,
          width_shift_range=0.2,
          height_shift_range=0.2,
          shear_range=0.2,
          zoom_range=0.2,
          horizontal_flip=True,
          fill_mode='nearest')

validation_dir = "/tmp/rockpaperscissors/rps-cv-images/data_model/val"
validation_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = training_datagen.flow_from_directory(
          training_dir,
          target_size=(150,150),
          class_mode='categorical',
          batch_size =126
)

validation_generator = validation_datagen.flow_from_directory(
          validation_dir,
          target_size=(150,150),
          class_mode='categorical',
          batch_size =126

)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

model.compile(
    loss = 'categorical_crossentropy',
    optimizer='rmsprop',
    metrics=['accuracy']
  )

history = model.fit(
    train_generator,
    epochs=28,
    validation_data=validation_generator,
    verbose=1,
    batch_size=14

)

model.save("rockpaperscissors.h5")

import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

uploaded = files.upload()


for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  #urutan [Paper, Rock, Scissors]
  print(fn)
  output_c = np.argmax(classes)
  if output_c == 0:
    print('Paper')
  elif output_c==1:
    print ('Rock')
  else:
    print ('scissors')

"""Nama : Magrozan Qobus Zaidan"""

